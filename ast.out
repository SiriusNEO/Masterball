
..* --- RootNode --- *

[GlobalScope]
VarTable: {col=[VarRegistry] INT[]|col, d=[VarRegistry] INT[][]|d, row=[VarRegistry] INT[]|row, N=[VarRegistry] INT|N}
FuncTable: {getInt=[FuncRegistry] name: getInt type: func, retType:INT args:, print=[FuncRegistry] name: print type: func, retType:VOID args:STRING , println=[FuncRegistry] name: println type: func, retType:VOID args:STRING , printBoard=[FuncRegistry] name: printBoard type: func, retType:VOID args:, search=[FuncRegistry] name: search type: func, retType:VOID args:INT , printInt=[FuncRegistry] name: printInt type: func, retType:VOID args:INT , printlnInt=[FuncRegistry] name: printlnInt type: func, retType:VOID args:INT , toString=[FuncRegistry] name: toString type: func, retType:STRING args:INT , main=[FuncRegistry] name: main type: func, retType:INT args:, getString=[FuncRegistry] name: getString type: func, retType:STRING args:}
ClassTable: {}

....* --- VarDefStmtNode --- *


......* --- VarDefSingleNode --- *

[VarRegistry] INT|N

........* --- AtomExpNode --- *

type: INT
text: 8

....* --- VarDefStmtNode --- *


......* --- VarDefSingleNode --- *

[VarRegistry] INT[]|row

........* --- NewExpNode --- *

type: INT[]
NewType: INT[]

....* --- VarDefStmtNode --- *


......* --- VarDefSingleNode --- *

[VarRegistry] INT[]|col

........* --- NewExpNode --- *

type: INT[]
NewType: INT[]

....* --- VarDefStmtNode --- *


......* --- VarDefSingleNode --- *

[VarRegistry] INT[][]|d

........* --- NewExpNode --- *

type: INT[][]
NewType: INT[][]

....* --- FuncDefNode --- *

[FuncRegistry] name: printBoard type: func, retType:VOID args:

......* --- SuiteNode --- *

[NormalScope]
VarTable: {i=[VarRegistry] INT|i, j=[VarRegistry] INT|j}

........* --- VarDefStmtNode --- *


..........* --- VarDefSingleNode --- *

[VarRegistry] INT|i

........* --- VarDefStmtNode --- *


..........* --- VarDefSingleNode --- *

[VarRegistry] INT|j

........* --- ForStmtNode --- *

init: 

..........* --- AssignExpNode --- *

type: INT

............* --- AtomExpNode --- *

type: INT
text: i

............* --- AtomExpNode --- *

type: INT
text: 0
condi: 

..........* --- BinaryExpNode --- *

type: BOOL
op: <

............* --- AtomExpNode --- *

type: INT
text: i

............* --- AtomExpNode --- *

type: INT
text: N
incr: 

..........* --- PostfixExpNode --- *

type: INT
op: ++

............* --- AtomExpNode --- *

type: INT
text: i
body: 

..........* --- SuiteStmtNode --- *


............* --- SuiteNode --- *

[NormalScope]
VarTable: {}

..............* --- ForStmtNode --- *

init: 

................* --- AssignExpNode --- *

type: INT

..................* --- AtomExpNode --- *

type: INT
text: j

..................* --- AtomExpNode --- *

type: INT
text: 0
condi: 

................* --- BinaryExpNode --- *

type: BOOL
op: <

..................* --- AtomExpNode --- *

type: INT
text: j

..................* --- AtomExpNode --- *

type: INT
text: N
incr: 

................* --- PostfixExpNode --- *

type: INT
op: ++

..................* --- AtomExpNode --- *

type: INT
text: j
body: 

................* --- SuiteStmtNode --- *


..................* --- SuiteNode --- *

[NormalScope]
VarTable: {}

....................* --- IfStmtNode --- *

condi: 

......................* --- BinaryExpNode --- *

type: BOOL
op: ==

........................* --- IndexExpNode --- *

type: INT

..........................* --- AtomExpNode --- *

type: INT[]
text: col

..........................* --- AtomExpNode --- *

type: INT
text: i

........................* --- AtomExpNode --- *

type: INT
text: j
if true: 

......................* --- PureStmtNode --- *


........................* --- FuncCallExpNode --- *

type: VOID

..........................* --- AtomExpNode --- *

type: func, retType:VOID args:STRING 
text: print

..........................* --- AtomExpNode --- *

type: STRING
text: " O"
else: 

......................* --- PureStmtNode --- *


........................* --- FuncCallExpNode --- *

type: VOID

..........................* --- AtomExpNode --- *

type: func, retType:VOID args:STRING 
text: print

..........................* --- AtomExpNode --- *

type: STRING
text: " ."

..............* --- PureStmtNode --- *


................* --- FuncCallExpNode --- *

type: VOID

..................* --- AtomExpNode --- *

type: func, retType:VOID args:STRING 
text: println

..................* --- AtomExpNode --- *

type: STRING
text: ""

........* --- PureStmtNode --- *


..........* --- FuncCallExpNode --- *

type: VOID

............* --- AtomExpNode --- *

type: func, retType:VOID args:STRING 
text: println

............* --- AtomExpNode --- *

type: STRING
text: ""

....* --- FuncDefNode --- *

[FuncRegistry] name: search type: func, retType:VOID args:INT 

......* --- SuiteNode --- *

[NormalScope]
VarTable: {}

........* --- IfStmtNode --- *

condi: 

..........* --- BinaryExpNode --- *

type: BOOL
op: ==

............* --- AtomExpNode --- *

type: INT
text: c

............* --- AtomExpNode --- *

type: INT
text: N
if true: 

..........* --- SuiteStmtNode --- *


............* --- SuiteNode --- *

[NormalScope]
VarTable: {}

..............* --- PureStmtNode --- *


................* --- FuncCallExpNode --- *

type: VOID

..................* --- AtomExpNode --- *

type: func, retType:VOID args:
text: printBoard
else: 

..........* --- SuiteStmtNode --- *


............* --- SuiteNode --- *

[NormalScope]
VarTable: {r=[VarRegistry] INT|r}

..............* --- VarDefStmtNode --- *


................* --- VarDefSingleNode --- *

[VarRegistry] INT|r

..............* --- ForStmtNode --- *

init: 

................* --- AssignExpNode --- *

type: INT

..................* --- AtomExpNode --- *

type: INT
text: r

..................* --- AtomExpNode --- *

type: INT
text: 0
condi: 

................* --- BinaryExpNode --- *

type: BOOL
op: <

..................* --- AtomExpNode --- *

type: INT
text: r

..................* --- AtomExpNode --- *

type: INT
text: N
incr: 

................* --- PostfixExpNode --- *

type: INT
op: ++

..................* --- AtomExpNode --- *

type: INT
text: r
body: 

................* --- SuiteStmtNode --- *


..................* --- SuiteNode --- *

[NormalScope]
VarTable: {}

....................* --- IfStmtNode --- *

condi: 

......................* --- BinaryExpNode --- *

type: BOOL
op: &&

........................* --- BinaryExpNode --- *

type: BOOL
op: &&

..........................* --- BinaryExpNode --- *

type: BOOL
op: ==

............................* --- IndexExpNode --- *

type: INT

..............................* --- AtomExpNode --- *

type: INT[]
text: row

..............................* --- AtomExpNode --- *

type: INT
text: r

............................* --- AtomExpNode --- *

type: INT
text: 0

..........................* --- BinaryExpNode --- *

type: BOOL
op: ==

............................* --- IndexExpNode --- *

type: INT

..............................* --- IndexExpNode --- *

type: INT[]

................................* --- AtomExpNode --- *

type: INT[][]
text: d

................................* --- AtomExpNode --- *

type: INT
text: 0

..............................* --- BinaryExpNode --- *

type: INT
op: +

................................* --- AtomExpNode --- *

type: INT
text: r

................................* --- AtomExpNode --- *

type: INT
text: c

............................* --- AtomExpNode --- *

type: INT
text: 0

........................* --- BinaryExpNode --- *

type: BOOL
op: ==

..........................* --- IndexExpNode --- *

type: INT

............................* --- IndexExpNode --- *

type: INT[]

..............................* --- AtomExpNode --- *

type: INT[][]
text: d

..............................* --- AtomExpNode --- *

type: INT
text: 1

............................* --- BinaryExpNode --- *

type: INT
op: -

..............................* --- BinaryExpNode --- *

type: INT
op: -

................................* --- BinaryExpNode --- *

type: INT
op: +

..................................* --- AtomExpNode --- *

type: INT
text: r

..................................* --- AtomExpNode --- *

type: INT
text: N

................................* --- AtomExpNode --- *

type: INT
text: 1

..............................* --- AtomExpNode --- *

type: INT
text: c

..........................* --- AtomExpNode --- *

type: INT
text: 0
if true: 

......................* --- SuiteStmtNode --- *


........................* --- SuiteNode --- *

[NormalScope]
VarTable: {}

..........................* --- PureStmtNode --- *


............................* --- AssignExpNode --- *

type: INT

..............................* --- IndexExpNode --- *

type: INT

................................* --- IndexExpNode --- *

type: INT[]

..................................* --- AtomExpNode --- *

type: INT[][]
text: d

..................................* --- AtomExpNode --- *

type: INT
text: 1

................................* --- BinaryExpNode --- *

type: INT
op: -

..................................* --- BinaryExpNode --- *

type: INT
op: -

....................................* --- BinaryExpNode --- *

type: INT
op: +

......................................* --- AtomExpNode --- *

type: INT
text: r

......................................* --- AtomExpNode --- *

type: INT
text: N

....................................* --- AtomExpNode --- *

type: INT
text: 1

..................................* --- AtomExpNode --- *

type: INT
text: c

..............................* --- AtomExpNode --- *

type: INT
text: 1

..........................* --- PureStmtNode --- *


............................* --- AssignExpNode --- *

type: INT

..............................* --- IndexExpNode --- *

type: INT

................................* --- IndexExpNode --- *

type: INT[]

..................................* --- AtomExpNode --- *

type: INT[][]
text: d

..................................* --- AtomExpNode --- *

type: INT
text: 0

................................* --- BinaryExpNode --- *

type: INT
op: +

..................................* --- AtomExpNode --- *

type: INT
text: r

..................................* --- AtomExpNode --- *

type: INT
text: c

..............................* --- AtomExpNode --- *

type: INT
text: 1

..........................* --- PureStmtNode --- *


............................* --- AssignExpNode --- *

type: INT

..............................* --- IndexExpNode --- *

type: INT

................................* --- AtomExpNode --- *

type: INT[]
text: row

................................* --- AtomExpNode --- *

type: INT
text: r

..............................* --- AtomExpNode --- *

type: INT
text: 1

..........................* --- PureStmtNode --- *


............................* --- AssignExpNode --- *

type: INT

..............................* --- IndexExpNode --- *

type: INT

................................* --- AtomExpNode --- *

type: INT[]
text: col

................................* --- AtomExpNode --- *

type: INT
text: c

..............................* --- AtomExpNode --- *

type: INT
text: r

..........................* --- PureStmtNode --- *


............................* --- FuncCallExpNode --- *

type: VOID

..............................* --- AtomExpNode --- *

type: func, retType:VOID args:INT 
text: search

..............................* --- BinaryExpNode --- *

type: INT
op: +

................................* --- AtomExpNode --- *

type: INT
text: c

................................* --- AtomExpNode --- *

type: INT
text: 1

..........................* --- PureStmtNode --- *


............................* --- AssignExpNode --- *

type: INT

..............................* --- IndexExpNode --- *

type: INT

................................* --- AtomExpNode --- *

type: INT[]
text: row

................................* --- AtomExpNode --- *

type: INT
text: r

..............................* --- AtomExpNode --- *

type: INT
text: 0

..........................* --- PureStmtNode --- *


............................* --- AssignExpNode --- *

type: INT

..............................* --- IndexExpNode --- *

type: INT

................................* --- IndexExpNode --- *

type: INT[]

..................................* --- AtomExpNode --- *

type: INT[][]
text: d

..................................* --- AtomExpNode --- *

type: INT
text: 0

................................* --- BinaryExpNode --- *

type: INT
op: +

..................................* --- AtomExpNode --- *

type: INT
text: r

..................................* --- AtomExpNode --- *

type: INT
text: c

..............................* --- AtomExpNode --- *

type: INT
text: 0

..........................* --- PureStmtNode --- *


............................* --- AssignExpNode --- *

type: INT

..............................* --- IndexExpNode --- *

type: INT

................................* --- IndexExpNode --- *

type: INT[]

..................................* --- AtomExpNode --- *

type: INT[][]
text: d

..................................* --- AtomExpNode --- *

type: INT
text: 1

................................* --- BinaryExpNode --- *

type: INT
op: -

..................................* --- BinaryExpNode --- *

type: INT
op: -

....................................* --- BinaryExpNode --- *

type: INT
op: +

......................................* --- AtomExpNode --- *

type: INT
text: r

......................................* --- AtomExpNode --- *

type: INT
text: N

....................................* --- AtomExpNode --- *

type: INT
text: 1

..................................* --- AtomExpNode --- *

type: INT
text: c

..............................* --- AtomExpNode --- *

type: INT
text: 0
else: 

....* --- FuncDefNode --- *

[FuncRegistry] name: main type: func, retType:INT args:

......* --- SuiteNode --- *

[NormalScope]
VarTable: {i=[VarRegistry] INT|i}

........* --- VarDefStmtNode --- *


..........* --- VarDefSingleNode --- *

[VarRegistry] INT|i

........* --- ForStmtNode --- *

init: 

..........* --- AssignExpNode --- *

type: INT

............* --- AtomExpNode --- *

type: INT
text: i

............* --- AtomExpNode --- *

type: INT
text: 0
condi: 

..........* --- BinaryExpNode --- *

type: BOOL
op: <

............* --- AtomExpNode --- *

type: INT
text: i

............* --- AtomExpNode --- *

type: INT
text: 8
incr: 

..........* --- PrefixExpNode --- *

type: INT
op: ++

............* --- AtomExpNode --- *

type: INT
text: i
body: 

..........* --- SuiteStmtNode --- *


............* --- SuiteNode --- *

[NormalScope]
VarTable: {}

..............* --- PureStmtNode --- *


................* --- AssignExpNode --- *

type: INT

..................* --- IndexExpNode --- *

type: INT

....................* --- AtomExpNode --- *

type: INT[]
text: row

....................* --- AtomExpNode --- *

type: INT
text: i

..................* --- AtomExpNode --- *

type: INT
text: 0

..............* --- PureStmtNode --- *


................* --- AssignExpNode --- *

type: INT

..................* --- IndexExpNode --- *

type: INT

....................* --- AtomExpNode --- *

type: INT[]
text: col

....................* --- AtomExpNode --- *

type: INT
text: i

..................* --- AtomExpNode --- *

type: INT
text: 0

........* --- ForStmtNode --- *

init: 

..........* --- AssignExpNode --- *

type: INT

............* --- AtomExpNode --- *

type: INT
text: i

............* --- AtomExpNode --- *

type: INT
text: 0
condi: 

..........* --- BinaryExpNode --- *

type: BOOL
op: <

............* --- AtomExpNode --- *

type: INT
text: i

............* --- AtomExpNode --- *

type: INT
text: 2
incr: 

..........* --- PostfixExpNode --- *

type: INT
op: ++

............* --- AtomExpNode --- *

type: INT
text: i
body: 

..........* --- SuiteStmtNode --- *


............* --- SuiteNode --- *

[NormalScope]
VarTable: {j=[VarRegistry] INT|j}

..............* --- PureStmtNode --- *


................* --- AssignExpNode --- *

type: INT[]

..................* --- IndexExpNode --- *

type: INT[]

....................* --- AtomExpNode --- *

type: INT[][]
text: d

....................* --- AtomExpNode --- *

type: INT
text: i

..................* --- NewExpNode --- *

type: INT[]
NewType: INT[]

..............* --- VarDefStmtNode --- *


................* --- VarDefSingleNode --- *

[VarRegistry] INT|j

..............* --- ForStmtNode --- *

init: 

................* --- AssignExpNode --- *

type: INT

..................* --- AtomExpNode --- *

type: INT
text: j

..................* --- AtomExpNode --- *

type: INT
text: 0
condi: 

................* --- BinaryExpNode --- *

type: BOOL
op: <

..................* --- AtomExpNode --- *

type: INT
text: j

..................* --- BinaryExpNode --- *

type: INT
op: -

....................* --- BinaryExpNode --- *

type: INT
op: +

......................* --- AtomExpNode --- *

type: INT
text: 8

......................* --- AtomExpNode --- *

type: INT
text: 8

....................* --- AtomExpNode --- *

type: INT
text: 1
incr: 

................* --- PrefixExpNode --- *

type: INT
op: ++

..................* --- AtomExpNode --- *

type: INT
text: j
body: 

................* --- PureStmtNode --- *


..................* --- AssignExpNode --- *

type: INT

....................* --- IndexExpNode --- *

type: INT

......................* --- IndexExpNode --- *

type: INT[]

........................* --- AtomExpNode --- *

type: INT[][]
text: d

........................* --- AtomExpNode --- *

type: INT
text: i

......................* --- AtomExpNode --- *

type: INT
text: j

....................* --- AtomExpNode --- *

type: INT
text: 0

........* --- PureStmtNode --- *


..........* --- FuncCallExpNode --- *

type: VOID

............* --- AtomExpNode --- *

type: func, retType:VOID args:INT 
text: search

............* --- AtomExpNode --- *

type: INT
text: 0

........* --- ReturnStmtNode --- *


..........* --- AtomExpNode --- *

type: INT
text: 0
